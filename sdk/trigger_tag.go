
// TriggerTag automatically generated by SDKgen please do not edit this file manually
// @see https://sdkgen.app


package sdk

import (
    "bytes"
    "encoding/json"
    "errors"
    "fmt"
    "github.com/apioo/sdkgen-go/v2"
    "io"
    "net/http"
    "net/url"
    
)

type TriggerTag struct {
    internal *sdkgen.TagAbstract
}



// Create Creates a new trigger
func (client *TriggerTag) Create(user string, document string, payload TriggerCreate) (*Message, error) {
    pathParams := make(map[string]interface{})
    pathParams["user"] = user
    pathParams["document"] = document

    queryParams := make(map[string]interface{})

    var queryStructNames []string

    u, err := url.Parse(client.internal.Parser.Url("/document/:user/:document/trigger", pathParams))
    if err != nil {
        return nil, err
    }

    u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()

    raw, err := json.Marshal(payload)
    if err != nil {
        return nil, err
    }

    var reqBody = bytes.NewReader(raw)

    req, err := http.NewRequest("POST", u.String(), reqBody)
    if err != nil {
        return nil, err
    }

    req.Header.Set("Content-Type", "application/json")

    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    respBody, err := io.ReadAll(resp.Body)
    if err != nil {
        return nil, err
    }

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        var data Message
        err := json.Unmarshal(respBody, &data)

        return &data, err
    }

    var statusCode = resp.StatusCode
    if statusCode == 400 {
        var data Message
        err := json.Unmarshal(respBody, &data)

        return nil, &MessageException{
            Payload: data,
            Previous: err,
        }
    }

    if statusCode == 404 {
        var data Message
        err := json.Unmarshal(respBody, &data)

        return nil, &MessageException{
            Payload: data,
            Previous: err,
        }
    }

    if statusCode == 500 {
        var data Message
        err := json.Unmarshal(respBody, &data)

        return nil, &MessageException{
            Payload: data,
            Previous: err,
        }
    }

    return nil, errors.New(fmt.Sprint("The server returned an unknown status code: ", statusCode))
}

// Delete Removes a trigger
func (client *TriggerTag) Delete(user string, document string, id string) (*Message, error) {
    pathParams := make(map[string]interface{})
    pathParams["user"] = user
    pathParams["document"] = document
    pathParams["id"] = id

    queryParams := make(map[string]interface{})

    var queryStructNames []string

    u, err := url.Parse(client.internal.Parser.Url("/document/:user/:document/trigger/:id", pathParams))
    if err != nil {
        return nil, err
    }

    u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()


    req, err := http.NewRequest("DELETE", u.String(), nil)
    if err != nil {
        return nil, err
    }


    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    respBody, err := io.ReadAll(resp.Body)
    if err != nil {
        return nil, err
    }

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        var data Message
        err := json.Unmarshal(respBody, &data)

        return &data, err
    }

    var statusCode = resp.StatusCode
    if statusCode == 400 {
        var data Message
        err := json.Unmarshal(respBody, &data)

        return nil, &MessageException{
            Payload: data,
            Previous: err,
        }
    }

    if statusCode == 404 {
        var data Message
        err := json.Unmarshal(respBody, &data)

        return nil, &MessageException{
            Payload: data,
            Previous: err,
        }
    }

    if statusCode == 500 {
        var data Message
        err := json.Unmarshal(respBody, &data)

        return nil, &MessageException{
            Payload: data,
            Previous: err,
        }
    }

    return nil, errors.New(fmt.Sprint("The server returned an unknown status code: ", statusCode))
}

// Execute Executes a trigger
func (client *TriggerTag) Execute(user string, document string, id string, payload Passthru) (*Message, error) {
    pathParams := make(map[string]interface{})
    pathParams["user"] = user
    pathParams["document"] = document
    pathParams["id"] = id

    queryParams := make(map[string]interface{})

    var queryStructNames []string

    u, err := url.Parse(client.internal.Parser.Url("/document/:user/:document/trigger/:id/execute", pathParams))
    if err != nil {
        return nil, err
    }

    u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()

    raw, err := json.Marshal(payload)
    if err != nil {
        return nil, err
    }

    var reqBody = bytes.NewReader(raw)

    req, err := http.NewRequest("POST", u.String(), reqBody)
    if err != nil {
        return nil, err
    }

    req.Header.Set("Content-Type", "application/json")

    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    respBody, err := io.ReadAll(resp.Body)
    if err != nil {
        return nil, err
    }

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        var data Message
        err := json.Unmarshal(respBody, &data)

        return &data, err
    }

    var statusCode = resp.StatusCode
    if statusCode == 400 {
        var data Message
        err := json.Unmarshal(respBody, &data)

        return nil, &MessageException{
            Payload: data,
            Previous: err,
        }
    }

    if statusCode == 404 {
        var data Message
        err := json.Unmarshal(respBody, &data)

        return nil, &MessageException{
            Payload: data,
            Previous: err,
        }
    }

    if statusCode == 500 {
        var data Message
        err := json.Unmarshal(respBody, &data)

        return nil, &MessageException{
            Payload: data,
            Previous: err,
        }
    }

    return nil, errors.New(fmt.Sprint("The server returned an unknown status code: ", statusCode))
}

// Get Returns a trigger
func (client *TriggerTag) Get(user string, document string, id string) (*Trigger, error) {
    pathParams := make(map[string]interface{})
    pathParams["user"] = user
    pathParams["document"] = document
    pathParams["id"] = id

    queryParams := make(map[string]interface{})

    var queryStructNames []string

    u, err := url.Parse(client.internal.Parser.Url("/document/:user/:document/trigger/:id", pathParams))
    if err != nil {
        return nil, err
    }

    u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()


    req, err := http.NewRequest("GET", u.String(), nil)
    if err != nil {
        return nil, err
    }


    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    respBody, err := io.ReadAll(resp.Body)
    if err != nil {
        return nil, err
    }

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        var data Trigger
        err := json.Unmarshal(respBody, &data)

        return &data, err
    }

    var statusCode = resp.StatusCode
    if statusCode == 400 {
        var data Message
        err := json.Unmarshal(respBody, &data)

        return nil, &MessageException{
            Payload: data,
            Previous: err,
        }
    }

    if statusCode == 404 {
        var data Message
        err := json.Unmarshal(respBody, &data)

        return nil, &MessageException{
            Payload: data,
            Previous: err,
        }
    }

    if statusCode == 500 {
        var data Message
        err := json.Unmarshal(respBody, &data)

        return nil, &MessageException{
            Payload: data,
            Previous: err,
        }
    }

    return nil, errors.New(fmt.Sprint("The server returned an unknown status code: ", statusCode))
}

// GetAll Returns all configured triggers
func (client *TriggerTag) GetAll(user string, document string, startIndex int, count int, search string) (*TriggerCollection, error) {
    pathParams := make(map[string]interface{})
    pathParams["user"] = user
    pathParams["document"] = document

    queryParams := make(map[string]interface{})
    queryParams["startIndex"] = startIndex
    queryParams["count"] = count
    queryParams["search"] = search

    var queryStructNames []string

    u, err := url.Parse(client.internal.Parser.Url("/document/:user/:document/trigger", pathParams))
    if err != nil {
        return nil, err
    }

    u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()


    req, err := http.NewRequest("GET", u.String(), nil)
    if err != nil {
        return nil, err
    }


    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    respBody, err := io.ReadAll(resp.Body)
    if err != nil {
        return nil, err
    }

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        var data TriggerCollection
        err := json.Unmarshal(respBody, &data)

        return &data, err
    }

    var statusCode = resp.StatusCode
    if statusCode == 400 {
        var data Message
        err := json.Unmarshal(respBody, &data)

        return nil, &MessageException{
            Payload: data,
            Previous: err,
        }
    }

    if statusCode == 404 {
        var data Message
        err := json.Unmarshal(respBody, &data)

        return nil, &MessageException{
            Payload: data,
            Previous: err,
        }
    }

    if statusCode == 500 {
        var data Message
        err := json.Unmarshal(respBody, &data)

        return nil, &MessageException{
            Payload: data,
            Previous: err,
        }
    }

    return nil, errors.New(fmt.Sprint("The server returned an unknown status code: ", statusCode))
}

// Update Updates a trigger
func (client *TriggerTag) Update(user string, document string, id string, payload TriggerUpdate) (*Message, error) {
    pathParams := make(map[string]interface{})
    pathParams["user"] = user
    pathParams["document"] = document
    pathParams["id"] = id

    queryParams := make(map[string]interface{})

    var queryStructNames []string

    u, err := url.Parse(client.internal.Parser.Url("/document/:user/:document/trigger/:id", pathParams))
    if err != nil {
        return nil, err
    }

    u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()

    raw, err := json.Marshal(payload)
    if err != nil {
        return nil, err
    }

    var reqBody = bytes.NewReader(raw)

    req, err := http.NewRequest("PUT", u.String(), reqBody)
    if err != nil {
        return nil, err
    }

    req.Header.Set("Content-Type", "application/json")

    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    respBody, err := io.ReadAll(resp.Body)
    if err != nil {
        return nil, err
    }

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        var data Message
        err := json.Unmarshal(respBody, &data)

        return &data, err
    }

    var statusCode = resp.StatusCode
    if statusCode == 400 {
        var data Message
        err := json.Unmarshal(respBody, &data)

        return nil, &MessageException{
            Payload: data,
            Previous: err,
        }
    }

    if statusCode == 404 {
        var data Message
        err := json.Unmarshal(respBody, &data)

        return nil, &MessageException{
            Payload: data,
            Previous: err,
        }
    }

    if statusCode == 500 {
        var data Message
        err := json.Unmarshal(respBody, &data)

        return nil, &MessageException{
            Payload: data,
            Previous: err,
        }
    }

    return nil, errors.New(fmt.Sprint("The server returned an unknown status code: ", statusCode))
}




func NewTriggerTag(httpClient *http.Client, parser *sdkgen.Parser) *TriggerTag {
	return &TriggerTag{
        internal: &sdkgen.TagAbstract{
            HttpClient: httpClient,
            Parser: parser,
        },
	}
}
