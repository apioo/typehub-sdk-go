// TriggerTag automatically generated by SDKgen please do not edit this file manually
// @see https://sdkgen.app

package sdk

import (
	"bytes"
	"encoding/json"
	"errors"
	"github.com/apioo/sdkgen-go"
	"io"
	"net/http"
	"net/url"
)

type TriggerTag struct {
	internal *sdkgen.TagAbstract
}

// Execute Executes a trigger
func (client *TriggerTag) Execute(user string, document string, id string, payload Passthru) (Message, error) {
	pathParams := make(map[string]interface{})
	pathParams["user"] = user
	pathParams["document"] = document
	pathParams["id"] = id

	queryParams := make(map[string]interface{})

	var queryStructNames []string

	u, err := url.Parse(client.internal.Parser.Url("/document/:user/:document/trigger/:id/execute", pathParams))
	if err != nil {
		return Message{}, err
	}

	u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()

	raw, err := json.Marshal(payload)
	if err != nil {
		return Message{}, err
	}

	var reqBody = bytes.NewReader(raw)

	req, err := http.NewRequest("POST", u.String(), reqBody)
	if err != nil {
		return Message{}, err
	}

	req.Header.Set("Content-Type", "application/json")

	resp, err := client.internal.HttpClient.Do(req)
	if err != nil {
		return Message{}, err
	}

	defer resp.Body.Close()

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return Message{}, err
	}

	if resp.StatusCode >= 200 && resp.StatusCode < 300 {
		var response Message
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return Message{}, err
		}

		return response, nil
	}

	switch resp.StatusCode {
	case 400:
		var response Message
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return Message{}, err
		}

		return Message{}, &MessageException{
			Payload: response,
		}
	case 404:
		var response Message
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return Message{}, err
		}

		return Message{}, &MessageException{
			Payload: response,
		}
	case 500:
		var response Message
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return Message{}, err
		}

		return Message{}, &MessageException{
			Payload: response,
		}
	default:
		return Message{}, errors.New("the server returned an unknown status code")
	}
}

// Delete Removes a trigger
func (client *TriggerTag) Delete(user string, document string, id string) (Message, error) {
	pathParams := make(map[string]interface{})
	pathParams["user"] = user
	pathParams["document"] = document
	pathParams["id"] = id

	queryParams := make(map[string]interface{})

	var queryStructNames []string

	u, err := url.Parse(client.internal.Parser.Url("/document/:user/:document/trigger/:id", pathParams))
	if err != nil {
		return Message{}, err
	}

	u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()

	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return Message{}, err
	}

	resp, err := client.internal.HttpClient.Do(req)
	if err != nil {
		return Message{}, err
	}

	defer resp.Body.Close()

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return Message{}, err
	}

	if resp.StatusCode >= 200 && resp.StatusCode < 300 {
		var response Message
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return Message{}, err
		}

		return response, nil
	}

	switch resp.StatusCode {
	case 400:
		var response Message
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return Message{}, err
		}

		return Message{}, &MessageException{
			Payload: response,
		}
	case 404:
		var response Message
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return Message{}, err
		}

		return Message{}, &MessageException{
			Payload: response,
		}
	case 500:
		var response Message
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return Message{}, err
		}

		return Message{}, &MessageException{
			Payload: response,
		}
	default:
		return Message{}, errors.New("the server returned an unknown status code")
	}
}

// Create Creates a new trigger
func (client *TriggerTag) Create(user string, document string, payload TriggerCreate) (Message, error) {
	pathParams := make(map[string]interface{})
	pathParams["user"] = user
	pathParams["document"] = document

	queryParams := make(map[string]interface{})

	var queryStructNames []string

	u, err := url.Parse(client.internal.Parser.Url("/document/:user/:document/trigger", pathParams))
	if err != nil {
		return Message{}, err
	}

	u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()

	raw, err := json.Marshal(payload)
	if err != nil {
		return Message{}, err
	}

	var reqBody = bytes.NewReader(raw)

	req, err := http.NewRequest("POST", u.String(), reqBody)
	if err != nil {
		return Message{}, err
	}

	req.Header.Set("Content-Type", "application/json")

	resp, err := client.internal.HttpClient.Do(req)
	if err != nil {
		return Message{}, err
	}

	defer resp.Body.Close()

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return Message{}, err
	}

	if resp.StatusCode >= 200 && resp.StatusCode < 300 {
		var response Message
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return Message{}, err
		}

		return response, nil
	}

	switch resp.StatusCode {
	case 400:
		var response Message
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return Message{}, err
		}

		return Message{}, &MessageException{
			Payload: response,
		}
	case 404:
		var response Message
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return Message{}, err
		}

		return Message{}, &MessageException{
			Payload: response,
		}
	case 500:
		var response Message
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return Message{}, err
		}

		return Message{}, &MessageException{
			Payload: response,
		}
	default:
		return Message{}, errors.New("the server returned an unknown status code")
	}
}

// Get Returns a trigger
func (client *TriggerTag) Get(user string, document string, id string) (Trigger, error) {
	pathParams := make(map[string]interface{})
	pathParams["user"] = user
	pathParams["document"] = document
	pathParams["id"] = id

	queryParams := make(map[string]interface{})

	var queryStructNames []string

	u, err := url.Parse(client.internal.Parser.Url("/document/:user/:document/trigger/:id", pathParams))
	if err != nil {
		return Trigger{}, err
	}

	u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()

	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return Trigger{}, err
	}

	resp, err := client.internal.HttpClient.Do(req)
	if err != nil {
		return Trigger{}, err
	}

	defer resp.Body.Close()

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return Trigger{}, err
	}

	if resp.StatusCode >= 200 && resp.StatusCode < 300 {
		var response Trigger
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return Trigger{}, err
		}

		return response, nil
	}

	switch resp.StatusCode {
	case 400:
		var response Message
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return Trigger{}, err
		}

		return Trigger{}, &MessageException{
			Payload: response,
		}
	case 404:
		var response Message
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return Trigger{}, err
		}

		return Trigger{}, &MessageException{
			Payload: response,
		}
	case 500:
		var response Message
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return Trigger{}, err
		}

		return Trigger{}, &MessageException{
			Payload: response,
		}
	default:
		return Trigger{}, errors.New("the server returned an unknown status code")
	}
}

// GetAll Returns all configured triggers
func (client *TriggerTag) GetAll(user string, document string, startIndex int, count int, search string) (TriggerCollection, error) {
	pathParams := make(map[string]interface{})
	pathParams["user"] = user
	pathParams["document"] = document

	queryParams := make(map[string]interface{})
	queryParams["startIndex"] = startIndex
	queryParams["count"] = count
	queryParams["search"] = search

	var queryStructNames []string

	u, err := url.Parse(client.internal.Parser.Url("/document/:user/:document/trigger", pathParams))
	if err != nil {
		return TriggerCollection{}, err
	}

	u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()

	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return TriggerCollection{}, err
	}

	resp, err := client.internal.HttpClient.Do(req)
	if err != nil {
		return TriggerCollection{}, err
	}

	defer resp.Body.Close()

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return TriggerCollection{}, err
	}

	if resp.StatusCode >= 200 && resp.StatusCode < 300 {
		var response TriggerCollection
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return TriggerCollection{}, err
		}

		return response, nil
	}

	switch resp.StatusCode {
	case 400:
		var response Message
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return TriggerCollection{}, err
		}

		return TriggerCollection{}, &MessageException{
			Payload: response,
		}
	case 404:
		var response Message
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return TriggerCollection{}, err
		}

		return TriggerCollection{}, &MessageException{
			Payload: response,
		}
	case 500:
		var response Message
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return TriggerCollection{}, err
		}

		return TriggerCollection{}, &MessageException{
			Payload: response,
		}
	default:
		return TriggerCollection{}, errors.New("the server returned an unknown status code")
	}
}

func NewTriggerTag(httpClient *http.Client, parser *sdkgen.Parser) *TriggerTag {
	return &TriggerTag{
		internal: &sdkgen.TagAbstract{
			HttpClient: httpClient,
			Parser:     parser,
		},
	}
}
